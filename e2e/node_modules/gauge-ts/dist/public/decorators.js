"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const HookMethod_1 = require("../models/HookMethod");
const HookRegistry_1 = require("../models/HookRegistry");
const HookType_1 = require("../models/HookType");
const StepRegistry_1 = require("../models/StepRegistry");
const StepRegistryEntry_1 = require("../models/StepRegistryEntry");
const Screenshot_1 = require("../screenshot/Screenshot");
function Step(stepTexts) {
    return function (target, _propertyKey, descriptor) {
        if (!(stepTexts instanceof Array)) {
            stepTexts = [stepTexts];
        }
        for (const s of stepTexts) {
            var stepValue = s.replace(/(<.*?>)/g, "{}");
            StepRegistry_1.default.add(stepValue, new StepRegistryEntry_1.StepRegistryEntry(s, stepValue, process.env.STEP_FILE_PATH, descriptor.value, undefined, stepTexts.length > 1));
        }
    };
}
exports.Step = Step;
function ContinueOnFailure(exceptions) {
    return function (target, _propertyKey, descriptor) {
        StepRegistry_1.default.addContinueOnFailure(descriptor.value, exceptions);
    };
}
exports.ContinueOnFailure = ContinueOnFailure;
function BeforeSuite() {
    return function (target, _propertyKey, descriptor) {
        let file = process.env.STEP_FILE_PATH;
        HookRegistry_1.default.addHook(HookType_1.HookType.BeforeSuite, new HookMethod_1.HookMethod(descriptor.value, file));
    };
}
exports.BeforeSuite = BeforeSuite;
function AfterSuite() {
    return function (target, _propertyKey, descriptor) {
        let file = process.env.STEP_FILE_PATH;
        HookRegistry_1.default.addHook(HookType_1.HookType.AfterSuite, new HookMethod_1.HookMethod(descriptor.value, file));
    };
}
exports.AfterSuite = AfterSuite;
function BeforeSpec(options) {
    return function (target, _propertyKey, descriptor) {
        let file = process.env.STEP_FILE_PATH;
        HookRegistry_1.default.addHook(HookType_1.HookType.BeforeSpec, new HookMethod_1.HookMethod(descriptor.value, file, options));
    };
}
exports.BeforeSpec = BeforeSpec;
function AfterSpec(options) {
    return function (target, _propertyKey, descriptor) {
        let file = process.env.STEP_FILE_PATH;
        HookRegistry_1.default.addHook(HookType_1.HookType.AfterSpec, new HookMethod_1.HookMethod(descriptor.value, file, options));
    };
}
exports.AfterSpec = AfterSpec;
function BeforeScenario(options) {
    return function (target, _propertyKey, descriptor) {
        let file = process.env.STEP_FILE_PATH;
        HookRegistry_1.default.addHook(HookType_1.HookType.BeforeScenario, new HookMethod_1.HookMethod(descriptor.value, file, options));
    };
}
exports.BeforeScenario = BeforeScenario;
function AfterScenario(options) {
    return function (target, _propertyKey, descriptor) {
        let file = process.env.STEP_FILE_PATH;
        HookRegistry_1.default.addHook(HookType_1.HookType.AfterScenario, new HookMethod_1.HookMethod(descriptor.value, file, options));
    };
}
exports.AfterScenario = AfterScenario;
function BeforeStep(options) {
    return function (target, _propertyKey, descriptor) {
        let file = process.env.STEP_FILE_PATH;
        HookRegistry_1.default.addHook(HookType_1.HookType.BeforeStep, new HookMethod_1.HookMethod(descriptor.value, file, options));
    };
}
exports.BeforeStep = BeforeStep;
function AfterStep(options) {
    return function (target, _propertyKey, descriptor) {
        let file = process.env.STEP_FILE_PATH;
        HookRegistry_1.default.addHook(HookType_1.HookType.AfterStep, new HookMethod_1.HookMethod(descriptor.value, file, options));
    };
}
exports.AfterStep = AfterStep;
/**
 * @deprecated Use CustomScreenshotWriter instead.
 */
function CustomScreenGrabber() {
    console.warn("CustomScreenGrabber is deprecated. Please use CustomScreenWriter.");
    return function (target, _propertyKey, descriptor) {
        Screenshot_1.Screenshot.setCustomScreenGrabber(descriptor.value);
    };
}
exports.CustomScreenGrabber = CustomScreenGrabber;
function CustomScreenshotWriter() {
    return function (target, _propertyKey, descriptor) {
        Screenshot_1.Screenshot.setCustomScreenshotWriter(descriptor.value);
    };
}
exports.CustomScreenshotWriter = CustomScreenshotWriter;
