"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const messages_1 = require("../gen/messages");
const StepRegistry_1 = require("../models/StepRegistry");
class StepPositionsProcessor {
    process(message) {
        return __awaiter(this, void 0, void 0, function* () {
            let req = message.stepPositionsRequest;
            let positions = StepRegistry_1.default.getStepPositions(req.filePath);
            return new messages_1.gauge.messages.Message({
                messageId: message.messageId,
                messageType: messages_1.gauge.messages.Message.MessageType.StepPositionsResponse,
                stepPositionsResponse: this.createStepPostionsResponse(positions)
            });
        });
    }
    createStepPostionsResponse(positions) {
        return new messages_1.gauge.messages.StepPositionsResponse({
            error: "",
            stepPositions: positions.map((p) => {
                return new messages_1.gauge.messages.StepPositionsResponse.StepPosition({
                    stepValue: p.stepValue,
                    span: new messages_1.gauge.messages.Span({
                        start: p.span.getStart().getLine(),
                        end: p.span.getEnd().getLine(),
                        startChar: p.span.getStart().getChar(),
                        endChar: p.span.getEnd().getChar()
                    })
                });
            })
        });
    }
}
exports.StepPositionsProcessor = StepPositionsProcessor;
