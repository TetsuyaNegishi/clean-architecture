"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const crypto_1 = require("crypto");
const os_1 = require("os");
const messages_1 = require("../gen/messages");
const StepRegistry_1 = require("../models/StepRegistry");
class ValidationProcessor {
    process(message) {
        return __awaiter(this, void 0, void 0, function* () {
            let req = message.stepValidateRequest;
            let step = req.stepValue;
            let stepValue = step.parameterizedStepValue;
            let isValid = true;
            let errorMessage = "";
            let errorType;
            if (!StepRegistry_1.default.isImplemented(req.stepText)) {
                isValid = false;
                errorMessage = "No step implementation found for " + stepValue;
                errorType = messages_1.gauge.messages.StepValidateResponse.ErrorType.STEP_IMPLEMENTATION_NOT_FOUND;
            }
            else if (StepRegistry_1.default.hasMultipleImplementations(req.stepText)) {
                isValid = false;
                errorMessage = "Multiple step implementation found for " + stepValue;
                errorType = messages_1.gauge.messages.StepValidateResponse.ErrorType.DUPLICATE_STEP_IMPLEMENTATION;
            }
            ;
            return new messages_1.gauge.messages.Message({
                messageId: message.messageId,
                messageType: messages_1.gauge.messages.Message.MessageType.StepValidateResponse,
                stepValidateResponse: new messages_1.gauge.messages.StepValidateResponse({
                    isValid: isValid,
                    errorMessage: errorMessage,
                    errorType: errorType,
                    suggestion: this.getSuggestion(isValid, step)
                })
            });
        });
    }
    getSuggestion(isValid, step) {
        if (isValid)
            return "";
        let argCount = 0;
        let stepText = step.stepValue.replace(/{}/g, function () { return "<arg" + argCount++ + ">"; });
        return `@Step("${stepText}")` + os_1.EOL +
            `public async ${this.getMethodName(stepText)}(${this.getParamsList(step.parameters)}) {` + os_1.EOL +
            `\tthrow new Error("Method not implemented.");` + os_1.EOL +
            '}';
    }
    getMethodName(stepText) {
        return `implementation${crypto_1.randomBytes(10).toString('hex')}`;
    }
    getParamsList(params) {
        if (!params || !params.length)
            return '';
        return params.map((_, i) => {
            return "arg" + i.toString() + ': any';
        }).join(", ");
    }
}
exports.ValidationProcessor = ValidationProcessor;
