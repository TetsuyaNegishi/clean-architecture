"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const messages_1 = require("../gen/messages");
class GRPCHandler {
    constructor(server, factory) {
        this._server = server;
        this._factory = factory;
    }
    getStepNames(call, callback) {
        let mes = new messages_1.gauge.messages.Message({
            messageId: 0,
            messageType: messages_1.gauge.messages.Message.MessageType.StepNamesRequest,
            stepNamesRequest: call.request
        });
        this._factory.get(mes.messageType).process(mes)
            .then((res) => callback(null, res.stepNamesResponse))
            .catch((err) => callback(err, undefined));
    }
    ;
    cacheFile(call, callback) {
        let mes = new messages_1.gauge.messages.Message({
            messageId: 0,
            messageType: messages_1.gauge.messages.Message.MessageType.CacheFileRequest,
            cacheFileRequest: call.request
        });
        this._factory.get(mes.messageType).process(mes)
            .then((res) => callback(null, new messages_1.gauge.messages.Empty()))
            .catch((err) => callback(err, undefined));
    }
    ;
    getStepPositions(call, callback) {
        let mes = new messages_1.gauge.messages.Message({
            messageId: 0,
            messageType: messages_1.gauge.messages.Message.MessageType.StepPositionsRequest,
            stepPositionsRequest: call.request
        });
        this._factory.get(mes.messageType).process(mes)
            .then((res) => callback(null, res.stepPositionsResponse))
            .catch((err) => callback(err, undefined));
    }
    ;
    getImplementationFiles(call, callback) {
        let mes = new messages_1.gauge.messages.Message({
            messageId: 0,
            messageType: messages_1.gauge.messages.Message.MessageType.ImplementationFileListRequest,
            implementationFileListRequest: call.request
        });
        this._factory.get(mes.messageType).process(mes)
            .then((res) => callback(null, res.implementationFileListResponse))
            .catch((err) => callback(err, undefined));
    }
    ;
    implementStub(call, callback) {
        let mes = new messages_1.gauge.messages.Message({
            messageId: 0,
            messageType: messages_1.gauge.messages.Message.MessageType.StubImplementationCodeRequest,
            stubImplementationCodeRequest: call.request
        });
        this._factory.get(mes.messageType).process(mes)
            .then((res) => callback(null, res.fileDiff))
            .catch((err) => callback(err, undefined));
    }
    ;
    validateStep(call, callback) {
        let mes = new messages_1.gauge.messages.Message({
            messageId: 0,
            messageType: messages_1.gauge.messages.Message.MessageType.StepValidateRequest,
            stepValidateRequest: call.request
        });
        this._factory.get(mes.messageType).process(mes)
            .then((res) => callback(null, res.stepValidateResponse))
            .catch((err) => callback(err, undefined));
    }
    ;
    refactor(call, callback) {
        let mes = new messages_1.gauge.messages.Message({
            messageId: 0,
            messageType: messages_1.gauge.messages.Message.MessageType.RefactorRequest,
            refactorRequest: call.request
        });
        this._factory.get(mes.messageType).process(mes)
            .then((res) => callback(null, res.refactorResponse))
            .catch((err) => callback(err, undefined));
    }
    ;
    getStepName(call, callback) {
        let mes = new messages_1.gauge.messages.Message({
            messageId: 0,
            messageType: messages_1.gauge.messages.Message.MessageType.StepNameRequest,
            stepNameRequest: call.request
        });
        this._factory.get(mes.messageType).process(mes)
            .then((res) => callback(null, res.stepNameResponse))
            .catch((err) => callback(err, undefined));
    }
    ;
    getGlobPatterns(call, callback) {
        let mes = new messages_1.gauge.messages.Message({
            messageId: 0,
            messageType: messages_1.gauge.messages.Message.MessageType.ImplementationFileGlobPatternRequest,
            implementationFileGlobPatternRequest: call.request
        });
        this._factory.get(mes.messageType).process(mes)
            .then((res) => callback(null, res.implementationFileGlobPatternResponse))
            .catch((err) => callback(err, undefined));
    }
    ;
    killProcess(call, callback) {
        this._server && this._server.forceShutdown();
        callback(null, new messages_1.gauge.messages.Empty());
        process.exit(0);
    }
    ;
}
exports.GRPCHandler = GRPCHandler;
