"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const messages_1 = require("../gen/messages");
const ImplLoader_1 = require("../loaders/ImplLoader");
const CacheFileProcessor_1 = require("./CacheFileProcessor");
const DataStoreInitProcessor_1 = require("./DataStoreInitProcessor");
const ExecutionEndingProcessor_1 = require("./ExecutionEndingProcessor");
const ExecutionStartingProcessor_1 = require("./ExecutionStartingProcessor");
const ImplementationFileGlobPatternProcessor_1 = require("./ImplementationFileGlobPatternProcessor");
const ImplementationFileListProcessor_1 = require("./ImplementationFileListProcessor");
const RefactorProcessor_1 = require("./RefactorProcessor");
const ScenarioExecutionEndingProcessor_1 = require("./ScenarioExecutionEndingProcessor");
const ScenarioExecutionStartingProcessor_1 = require("./ScenarioExecutionStartingProcessor");
const SpecExecutionEndingProcessor_1 = require("./SpecExecutionEndingProcessor");
const SpecExecutionStartingProcessor_1 = require("./SpecExecutionStartingProcessor");
const StepExecutionEndingProcessor_1 = require("./StepExecutionEndingProcessor");
const StepExecutionProcessor_1 = require("./StepExecutionProcessor");
const StepExecutionStartingProcessor_1 = require("./StepExecutionStartingProcessor");
const StepNameProcessor_1 = require("./StepNameProcessor");
const StepNamesProcessor_1 = require("./StepNamesProcessor");
const StepPositionsProcessor_1 = require("./StepPositionsProcessor");
const StubImplementationCodeProcessor_1 = require("./StubImplementationCodeProcessor");
const ValidationProcessor_1 = require("./ValidationProcessor");
class MessageProcessorFactory extends events_1.EventEmitter {
    constructor(loader) {
        super();
        this._loader = loader;
        this._processors = new Map([
            [messages_1.gauge.messages.Message.MessageType.StepValidateRequest, new ValidationProcessor_1.ValidationProcessor()],
            [messages_1.gauge.messages.Message.MessageType.RefactorRequest, new RefactorProcessor_1.RefactorProcessor()],
            [messages_1.gauge.messages.Message.MessageType.StepNameRequest, new StepNameProcessor_1.StepNameProcessor()],
            [messages_1.gauge.messages.Message.MessageType.StepNamesRequest, new StepNamesProcessor_1.StepNamesProcessor()],
            [messages_1.gauge.messages.Message.MessageType.CacheFileRequest, new CacheFileProcessor_1.CacheFileProcessor(this._loader)],
            [messages_1.gauge.messages.Message.MessageType.StepPositionsRequest, new StepPositionsProcessor_1.StepPositionsProcessor()],
            [messages_1.gauge.messages.Message.MessageType.ImplementationFileListRequest, new ImplementationFileListProcessor_1.ImplementationFileListProcessor()],
            [messages_1.gauge.messages.Message.MessageType.StubImplementationCodeRequest, new StubImplementationCodeProcessor_1.StubImplementationCodeProcessor()],
            [messages_1.gauge.messages.Message.MessageType.StepPositionsRequest, new StepPositionsProcessor_1.StepPositionsProcessor()],
            [messages_1.gauge.messages.Message.MessageType.ImplementationFileGlobPatternRequest, new ImplementationFileGlobPatternProcessor_1.ImplementationFileGlobPatternProcessor()],
            [messages_1.gauge.messages.Message.MessageType.SuiteDataStoreInit, new DataStoreInitProcessor_1.DataStoreInitProcessor()],
            [messages_1.gauge.messages.Message.MessageType.SpecDataStoreInit, new DataStoreInitProcessor_1.DataStoreInitProcessor()],
            [messages_1.gauge.messages.Message.MessageType.ScenarioDataStoreInit, new DataStoreInitProcessor_1.DataStoreInitProcessor()],
            [messages_1.gauge.messages.Message.MessageType.ExecutionStarting, new ExecutionStartingProcessor_1.ExecutionStartingProcessor()],
            [messages_1.gauge.messages.Message.MessageType.SpecExecutionStarting, new SpecExecutionStartingProcessor_1.SpecExecutionStartingProcessor()],
            [messages_1.gauge.messages.Message.MessageType.ScenarioExecutionStarting, new ScenarioExecutionStartingProcessor_1.ScenarioExecutionStartingProcessor()],
            [messages_1.gauge.messages.Message.MessageType.StepExecutionStarting, new StepExecutionStartingProcessor_1.StepExecutionStartingProcessor()],
            [messages_1.gauge.messages.Message.MessageType.ExecuteStep, new StepExecutionProcessor_1.StepExecutionProcessor()],
            [messages_1.gauge.messages.Message.MessageType.StepExecutionEnding, new StepExecutionEndingProcessor_1.StepExecutionEndingProcessor()],
            [messages_1.gauge.messages.Message.MessageType.ScenarioExecutionEnding, new ScenarioExecutionEndingProcessor_1.ScenarioExecutionEndingProcessor()],
            [messages_1.gauge.messages.Message.MessageType.SpecExecutionEnding, new SpecExecutionEndingProcessor_1.SpecExecutionEndingProcessor()],
            [messages_1.gauge.messages.Message.MessageType.ExecutionEnding, new ExecutionEndingProcessor_1.ExecutionEndingProcessor()],
        ]);
    }
    get(messageType) {
        return this._processors.get(messageType);
    }
    process(message) {
        return __awaiter(this, void 0, void 0, function* () {
            switch (message.messageType) {
                case messages_1.gauge.messages.Message.MessageType.KillProcessRequest:
                    process.exit(0);
                    return;
                case messages_1.gauge.messages.Message.MessageType.ExecutionStarting:
                    let loader = new ImplLoader_1.ImplLoader();
                    yield loader.loadImplementations();
                    break;
            }
            yield this._process(message);
        });
    }
    _process(message) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                let processor = this._processors.get(message.messageType);
                if (processor) {
                    let res = yield processor.process(message);
                    this.emit('messageProcessed', res);
                }
                else {
                    throw new Error('Unknown message type ' +
                        messages_1.gauge.messages.Message.MessageType[message.messageType]);
                }
            }
            catch (error) {
                console.error(error);
                process.exit(1);
            }
        });
    }
}
exports.MessageProcessorFactory = MessageProcessorFactory;
