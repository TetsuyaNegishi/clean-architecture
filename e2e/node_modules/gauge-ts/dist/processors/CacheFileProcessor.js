"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const messages_1 = require("../gen/messages");
const StepRegistry_1 = require("../models/StepRegistry");
const Util_1 = require("../utils/Util");
class CacheFileProcessor {
    constructor(loader) {
        this._loader = loader;
    }
    process(message) {
        return __awaiter(this, void 0, void 0, function* () {
            let req = message.cacheFileRequest;
            switch (req.status) {
                case messages_1.gauge.messages.CacheFileRequest.FileStatus.CHANGED:
                case messages_1.gauge.messages.CacheFileRequest.FileStatus.OPENED:
                    this._loader.reloadSteps(req.content, req.filePath);
                    break;
                case messages_1.gauge.messages.CacheFileRequest.FileStatus.CREATED:
                    if (!StepRegistry_1.default.isFileCached(req.filePath)) {
                        this.loadFromDisk(req.filePath);
                    }
                    break;
                case messages_1.gauge.messages.CacheFileRequest.FileStatus.CLOSED:
                    this.loadFromDisk(req.filePath);
                    break;
                case messages_1.gauge.messages.CacheFileRequest.FileStatus.DELETED:
                    this._loader.removeSteps(req.filePath);
                    break;
                default:
                    this._loader.reloadSteps(req.content, req.filePath);
                    break;
            }
            return new messages_1.gauge.messages.Message();
        });
    }
    loadFromDisk(filePath) {
        if (!Util_1.Util.exists(filePath))
            return;
        this._loader.reloadSteps(Util_1.Util.readFile(filePath), filePath);
    }
}
exports.CacheFileProcessor = CacheFileProcessor;
