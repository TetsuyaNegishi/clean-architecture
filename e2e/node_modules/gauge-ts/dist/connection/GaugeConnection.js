"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const net_1 = require("net");
const protobufjs_1 = require("protobufjs");
const messages_1 = require("../gen/messages");
class GaugeConnection extends events_1.EventEmitter {
    constructor() {
        super();
        this._socket = new net_1.Socket();
        this._host = '127.0.0.1';
    }
    start() {
        this._socket.connect(this.getGaugeInternalPort(), this._host);
        this._socket.on('data', (data) => {
            this.messageHandler(data);
        });
        this._socket.on('error', (err) => { throw err; });
    }
    write(message) {
        const m = messages_1.gauge.messages.Message.create(message);
        const encoded = messages_1.gauge.messages.Message.encodeDelimited(m);
        this._socket.write(encoded.finish());
    }
    messageHandler(data) {
        let r = new protobufjs_1.Reader(Buffer.from(data));
        while (r.pos < r.len) {
            const m = messages_1.gauge.messages.Message.decodeDelimited(r);
            this.emit("messageReceived", m);
        }
    }
    getGaugeInternalPort() {
        let p = process.env.GAUGE_INTERNAL_PORT;
        if (p == "") {
            throw `GAUGE_INTERNAL_PORT is not set`;
        }
        return p;
    }
}
exports.GaugeConnection = GaugeConnection;
