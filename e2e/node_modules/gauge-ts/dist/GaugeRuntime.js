"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const proto_loader_1 = require("@grpc/proto-loader");
const grpc_1 = require("grpc");
const path_1 = require("path");
const GaugeListener_1 = require("./connection/GaugeListener");
const GRPCHandler_1 = require("./connection/GRPCHandler");
const StaticLoader_1 = require("./loaders/StaticLoader");
const MessageProcessorFactory_1 = require("./processors/MessageProcessorFactory");
class GaugeRuntime {
    constructor() {
        this.lspProtoPath = path_1.join(__dirname, 'gen', 'lsp.proto');
    }
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            let loader = new StaticLoader_1.StaticLoader();
            loader.loadImplementations();
            let factory = new MessageProcessorFactory_1.MessageProcessorFactory(loader);
            if (process.env.GAUGE_LSP_GRPC) {
                let pd = proto_loader_1.loadSync(this.lspProtoPath);
                let lspService = grpc_1.loadPackageDefinition(pd).gauge.messages.lspService.service;
                let server = new grpc_1.Server();
                server.addService(lspService, new GRPCHandler_1.GRPCHandler(server, factory));
                var p = server.bind("127.0.0.1:0", grpc_1.ServerCredentials.createInsecure());
                console.log("Listening on port:" + p);
                server.start();
            }
            else {
                let listener = new GaugeListener_1.GaugeListener(factory);
                listener.pollForMessages();
            }
        });
    }
}
exports.GaugeRuntime = GaugeRuntime;
