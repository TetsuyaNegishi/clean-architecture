"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const HookRegistry_1 = require("../models/HookRegistry");
const StepRegistry_1 = require("../models/StepRegistry");
const Util_1 = require("../utils/Util");
class ImplLoader {
    loadImplementations() {
        return __awaiter(this, void 0, void 0, function* () {
            StepRegistry_1.default.clear();
            HookRegistry_1.default.clear();
            for (const file of Util_1.Util.getListOfFiles()) {
                process.env.STEP_FILE_PATH = file;
                let c = yield Util_1.Util.importFile(file);
                try {
                    if (c.default && c.default.length == 0) {
                        let instance = new c.default();
                        this.updateRegsitry(file, instance);
                    }
                }
                catch (error) {
                    error.message = `${error.message}. Step implemetations classes needs to be exported as default witout any constructor`;
                    console.error(error);
                }
            }
        });
    }
    updateRegsitry(file, instance) {
        StepRegistry_1.default.setInstanceForMethodsIn(file, instance);
        HookRegistry_1.default.setInstanceForMethodsIn(file, instance);
    }
}
exports.ImplLoader = ImplLoader;
