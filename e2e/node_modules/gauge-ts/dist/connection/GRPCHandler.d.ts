import { Server } from 'grpc';
import { gauge } from '../gen/messages';
import { MessageProcessorFactory } from '../processors/MessageProcessorFactory';
export declare class GRPCHandler {
    private readonly _server;
    private readonly _factory;
    constructor(server: Server | null, factory: MessageProcessorFactory);
    getStepNames(call: any, callback: gauge.messages.lspService.GetStepNamesCallback): void;
    cacheFile(call: any, callback: gauge.messages.lspService.CacheFileCallback): void;
    getStepPositions(call: any, callback: gauge.messages.lspService.GetStepPositionsCallback): void;
    getImplementationFiles(call: any, callback: gauge.messages.lspService.GetImplementationFilesCallback): void;
    implementStub(call: any, callback: gauge.messages.lspService.ImplementStubCallback): void;
    validateStep(call: any, callback: gauge.messages.lspService.ValidateStepCallback): void;
    refactor(call: any, callback: gauge.messages.lspService.RefactorCallback): void;
    getStepName(call: any, callback: gauge.messages.lspService.GetStepNameCallback): void;
    getGlobPatterns(call: any, callback: gauge.messages.lspService.GetGlobPatternsCallback): void;
    killProcess(call: any, callback: gauge.messages.lspService.KillProcessCallback): void;
}
