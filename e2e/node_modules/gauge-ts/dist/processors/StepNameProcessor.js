"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const messages_1 = require("../gen/messages");
const StepRegistry_1 = require("../models/StepRegistry");
class StepNameProcessor {
    process(message) {
        return __awaiter(this, void 0, void 0, function* () {
            let req = message.stepNameRequest;
            let resMes = new messages_1.gauge.messages.Message({
                messageId: message.messageId,
                messageType: messages_1.gauge.messages.Message.MessageType.StepNameResponse,
            });
            if (!StepRegistry_1.default.isImplemented(req.stepValue)) {
                resMes.stepNameResponse = new messages_1.gauge.messages.StepNameResponse({ isStepPresent: false });
            }
            else {
                let info = StepRegistry_1.default.get(req.stepValue);
                let span = info.getRange();
                resMes.stepNameResponse = new messages_1.gauge.messages.StepNameResponse({
                    isStepPresent: true,
                    fileName: info.getFilePath(),
                    hasAlias: info.hasAlias(),
                    stepName: [info.getStepText()],
                    span: new messages_1.gauge.messages.Span({
                        start: span.getStart().getLine(),
                        startChar: span.getStart().getChar(),
                        end: span.getEnd().getLine(),
                        endChar: span.getEnd().getChar(),
                    }),
                });
            }
            return resMes;
        });
    }
}
exports.StepNameProcessor = StepNameProcessor;
