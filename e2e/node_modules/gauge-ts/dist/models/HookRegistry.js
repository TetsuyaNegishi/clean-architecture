"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Operator_1 = require("../public/Operator");
const HookType_1 = require("./HookType");
class HookRegistry {
    constructor() {
        this._hooks = new Map([
            [HookType_1.HookType.BeforeSuite, new Array()],
            [HookType_1.HookType.BeforeSpec, new Array()],
            [HookType_1.HookType.BeforeScenario, new Array()],
            [HookType_1.HookType.BeforeStep, new Array()],
            [HookType_1.HookType.AfterSuite, new Array()],
            [HookType_1.HookType.AfterSpec, new Array()],
            [HookType_1.HookType.AfterScenario, new Array()],
            [HookType_1.HookType.AfterStep, new Array()]
        ]);
    }
    addHook(type, method) {
        this._hooks.get(type).push(method);
    }
    get(type, tags) {
        let hooks = this._hooks.get(type);
        if (!hooks || !hooks.length)
            return [];
        if (!tags.length)
            return hooks.filter((hook) => { return hook.getTags().length === 0; });
        return hooks.filter((hook) => {
            let hookTags = hook.getTags();
            let operator = hook.getTagAggregationOperator();
            if (!hookTags.length) {
                return true;
            }
            ;
            let matched = this.hasIntersection(tags, hookTags);
            switch (operator) {
                case Operator_1.Operator.And:
                    return matched === hookTags.length;
                case Operator_1.Operator.Or:
                    return matched > 0;
            }
        });
    }
    setInstanceForMethodsIn(file, instance) {
        this._hooks.forEach((hookMethods) => {
            hookMethods.forEach((hookMethod) => {
                hookMethod.setInstance(instance);
            });
        });
    }
    clear() {
        this._hooks.forEach((v, k) => { this._hooks.set(k, new Array()); });
    }
    hasIntersection(tags, hookTags) {
        return tags.filter((t) => { return hookTags.includes(t); }).length;
    }
}
exports.HookRegistry = HookRegistry;
const hookRegistry = new HookRegistry();
exports.default = hookRegistry;
