"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const fs_1 = require("fs");
const path_1 = require("path");
const typescript_1 = require("typescript");
const uuid_1 = require("uuid");
let klawSync = require('klaw-sync');
class Util {
    static importFile(file) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield Promise.resolve().then(() => require(file));
        });
    }
    static spawn(command, args) {
        return child_process_1.spawnSync(command, args);
    }
    static writeFile(filePath, content) {
        fs_1.writeFileSync(filePath, content);
    }
    static exists(filePath) {
        return fs_1.existsSync(filePath);
    }
    static readFile(file) {
        return fs_1.readFileSync(file, 'utf-8');
    }
    static readFileBuffer(file) {
        return fs_1.readFileSync(file).buffer;
    }
    static getListOfFiles() {
        var results = this.getImplDirs().reduce((files, dir) => {
            if (!fs_1.existsSync(dir)) {
                console.log("Failed to load implementations from " + dir);
                return files;
            }
            return files.concat(this.collectFilesIn(dir));
        }, []);
        return results;
    }
    static isTSFile(file) {
        return path_1.extname(file) === typescript_1.Extension.Ts;
    }
    static collectFilesIn(dir) {
        return klawSync(dir, {
            filter: function (item) {
                return Util.isTSFile(item.path);
            },
            traverseAll: true
        }).map(function (item) {
            return item.path;
        });
    }
    static getImplDirs() {
        const projectRoot = process.env.GAUGE_PROJECT_ROOT;
        if (process.env.STEP_IMPL_DIR) {
            return process.env.STEP_IMPL_DIR.split(",").map(function (dir) {
                return path_1.join(projectRoot, dir.trim());
            });
        }
        return [path_1.join(projectRoot, "tests")];
    }
    static getNewTSFileName(dir, counter = 0) {
        var tmpl = counter && "StepImplementation" + counter + typescript_1.Extension.Ts || "StepImplementation.ts";
        var fileName = path_1.join(dir, tmpl);
        if (!fs_1.existsSync(fileName)) {
            return fileName;
        }
        return Util.getNewTSFileName(dir, ++counter);
    }
    static isAsync(m) {
        let r = (m instanceof (() => __awaiter(this, void 0, void 0, function* () { })).constructor) === true;
        return r;
    }
    static getUniqueScreenshotFileName() {
        let dir = process.env.gauge_screenshots_dir;
        return path_1.join(dir, `screenshot-${uuid_1.v4()}.png`);
    }
}
exports.Util = Util;
