"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const path_1 = require("path");
const Util_1 = require("../utils/Util");
class Screenshot {
    static capture() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (this.customScreenshotWriter != null) {
                    if (Util_1.Util.isAsync(this.customScreenshotWriter)) {
                        return yield this.customScreenshotWriter();
                    }
                    else {
                        return Promise.resolve(this.customScreenshotWriter());
                    }
                }
                else if (this.customScreenGrabber != null) {
                    let data;
                    if (Util_1.Util.isAsync(this.customScreenshotWriter)) {
                        data = yield this.customScreenGrabber();
                    }
                    else {
                        data = this.customScreenGrabber();
                    }
                    let file = Util_1.Util.getUniqueScreenshotFileName();
                    fs_1.writeFileSync(file, data);
                    return path_1.basename(file);
                }
                else {
                    return this.captureScreenshot();
                }
            }
            catch (error) {
                console.log(error);
            }
            return Promise.resolve("");
        });
    }
    static captureScreenshot() {
        try {
            let filename = Util_1.Util.getUniqueScreenshotFileName();
            Util_1.Util.spawn("gauge_screenshot", [filename]);
            return path_1.basename(filename);
        }
        catch (error) {
            throw new Error(`\nFailed to take screenshot using gauge_screenshot.\n${error}`);
        }
    }
    static setCustomScreenGrabber(grabber) {
        this.customScreenGrabber = grabber;
    }
    static setCustomScreenshotWriter(writer) {
        this.customScreenshotWriter = writer;
    }
}
exports.Screenshot = Screenshot;
